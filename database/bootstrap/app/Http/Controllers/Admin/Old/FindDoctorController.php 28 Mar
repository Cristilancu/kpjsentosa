<?php namespace App\Http\Controllers\Admin;

use App\Http\Requests;
use App\Http\Controllers\Controller;
use App\doctor;
use App\service;
use App\setting;
use App\Country;
use App\Patient;
use App\User;
use DateTime;
use DB;
use Session;

use Illuminate\Http\Request;

class FindDoctorController extends Controller {

	public function getFindDoctorList()
	{
		$doctors = doctor::all();


		return view('admin.find_doctor.list', compact('doctors'));
	}

	public function getFindDoctorNew()
	{
		$services = service::where('status',1)->get();
		return view('admin.find_doctor.new', compact('services'));
	}

	public function postFindDoctorNew(Request $request)
	{
		// return $request->all();
		 $this->validate($request, [
	        'profile_status' => 'sometimes',
			'profile_consultant_name' => 'required',
			'profile_service' => 'required|exists:services,id',
			// 'profile_speciality' => 'required',
			'profile_degrees' => 'required',
			'profile_experience' => 'required',
			'profile_consultant_image' => 'required|image|mimes:jpeg,png|min:1|max:500',
			'profile_details' => 'required',
			'profile_clinic_hours' => 'required',
			'profile_consultant_type' => 'required',
			'profile_consultant_image_alt_text' => 'required',
			'profile_enable_link' => 'required'
	    ],[
	    'profile_status.sometimes' => 'The Status field is selected.',
	    'profile_consultant_name.required' => 'The Consultant Name field is required.',
	    'profile_service.required' => 'The Specialty field is required.',
	    'profile_service.exists' => 'The Specialty already exists.',
	    'profile_degrees.required' => 'The Degrees field is required.',
	    'profile_experience.required' => 'The Experince field is required.',
	    'profile_consultant_image.required' => 'The Consultant Image field is required.',
	    'profile_consultant_image.image' => 'The Consultant Image must be an image.',
	    'profile_details.required' => 'The Details is required.',
	    'profile_clinic_hours.required' => 'The Clinic Hours is required.',
	    'profile_consultant_type.required' => 'The Consultant Type is required.',
	    'profile_consultant_image_alt_text.required' => 'The Consultant Image Alt Text is required.',
	    'profile_enable_link.required' => 'The Enable Link is required.',
	    ]
	    );

		$doctor = new doctor();
		
		// if user choose a file, replace the old one //
		if( $request->hasFile('profile_consultant_image') ){
			$file = $request->file('profile_consultant_image');
			$destination_path = 'images/find_doctor/';
			$filename = str_random(6).'_'.$file->getClientOriginalName();
			$file->move(public_path() .'/'. $destination_path, $filename);
			$doctor->image = $destination_path . $filename;
		}
			// return public_path() .'/'. $destination_path.$filename;

		// replace old data with new data from the submitted form //
		$doctor->status = ($request->has('profile_status') && $request->profile_status == 'on'?1:0);
		$doctor->name = $request->profile_consultant_name;
		$doctor->service_id = $request->profile_service;
		$doctor->degrees = $request->profile_degrees;
		$doctor->experience = $request->profile_experience;
		// $doctor->image = $request->profile_consultant_image;
		$doctor->details = $request->profile_details;
		$doctor->clinic_hours = $request->profile_clinic_hours;
		$doctor->type = $request->profile_consultant_type;
		$doctor->image_alt_text = $request->profile_consultant_image_alt_text;
		$doctor->enable_link = $request->profile_enable_link;
		$doctor->save();

		return redirect('/admin/find_doctor_list')->with('message', 'The information has been saved/updated successfully.');
	}

	public function getFindDoctorEdit($id)
	{
		$doctor = doctor::find($id);
		$services = service::where('status',1)->get();

		$fecha =date('Y').'-'.date('m').'-01';
		$nuevafecha = strtotime ( '+0 month' , strtotime ( $fecha ) ) ;
		$nuevafecha = date ( 'Y-m-j' , $nuevafecha );
		$month = date("m",strtotime($nuevafecha));
		$year = date("Y",strtotime($nuevafecha));
		$meesactual = $month;
		$dateObj   = DateTime::createFromFormat('!m', $month);
		$monthName = $dateObj->format('F');


		$mes=$this->getCanlendar($nuevafecha,$id,$month,$year);
        //dd($mes);

		if(sizeof($mes)>35)
		{
			$jf=6;
		}else
		{
			$jf=5;
		}
 

		//dd($mes);
		return view('admin.find_doctor.edit', compact('doctor','services'))
		->with(['meesactual'=>$meesactual,'monthName'=>$monthName,'year'=>$year,'mes'=>$mes,'jf'=>$jf,'iddoc'=>$id]);
		// ALTER TABLE `doctors` ADD `status` ENUM('0','1') NOT NULL DEFAULT '1' AFTER `clinic_hours`;
		// ALTER TABLE `doctors` ADD `type` VARCHAR(190) NULL AFTER `status`, ADD `image_alt_text` VARCHAR(190) NULL AFTER `type`, ADD `enable_link` ENUM('none','appointment') NULL AFTER `image_alt_text`;
	}

public function changemes(Request $request)
	{
		$datec=$request->mesactual;
		$id=$request->id;

		$meesactual=date("m",strtotime($datec));
		$year = date("Y",strtotime($datec));
        $fecha =$year.'-'.$meesactual.'-01';
        

        if($request->accion=='next')
        {
        	$nuevafecha = strtotime ( '+1 month' , strtotime ( $fecha ) ) ;
        }elseif ($request->accion=='before') {
        	$nuevafecha = strtotime ( '-1 month' , strtotime ( $fecha ) ) ;
        }

		$nuevafecha = date ( 'Y-m-j' , $nuevafecha );
		$month = date("m",strtotime($nuevafecha));
		$year = date("Y",strtotime($nuevafecha));
		$meesactual = $month;
		$dateObj   = DateTime::createFromFormat('!m', $month);
		$monthName = $dateObj->format('F');

		$mes=$this->getCanlendar($nuevafecha,$id,$month,$year);
        //dd($mes);

		if(sizeof($mes)>35)
		{
			$jf=6;
		}else
		{
			$jf=5;
		}

		return view('admin.find_doctor.calendar')->with(['meesactual'=>$meesactual,'monthName'=>$monthName,'year'=>$year,'mes'=>$mes,'jf'=>$jf,'iddoc'=>$id]);


	}
	
	public function footer_setup(){  
	  $getintouch = setting::where('key', 'getintouch')->get();
	  $site_links = setting::where('key', 'site_link')->get();
	  $k_p_j = setting::where('key', 'k_p_j')->get();
	  $newsletter = setting::where('key', 'newsletter')->get();
	  $social_links = setting::where('key', 'social_links')->get();
	  $copyright    = setting::where('key', 'copyright')->get();
	  $privacypolicy = setting::where('key','privacypolicy')->get();
	  return view('admin.find_doctor.footer_setup')->with(['social_links'=>$social_links,'newsletter'=>$newsletter,'getintouch'=>$getintouch,'site_links'=>$site_links,'k_p_j'=>$k_p_j,'copyright'=>$copyright,'privacypolicy'=>$privacypolicy]);
	}
	
	public function add_footer_setup(Request $request){
		if($request->tab == "getintouch"){
			$status = 0;
			if($request->status){
				$status = 1;
			}
			$insert=DB::table('settings')->insert(
			  [
			      "key"=>$request->tab,
				  "status"=>$status,
				  "details"=>$request->icon,
				  "description"=>$request->title
			  ]
			);
			
			if($insert){
				return redirect()->back()->with('message', 'The information has been saved/updated successfully.');
			}else{
				return redirect()->back()->with('message', 'Sorry something went wrong!!'); 
			}
		}
		
	}
	
	
	public function edit_footer_setup(Request $request){
		
		$key 	= $request->key;
		$submit = $request->submit;
		// echo $key ;
		// echo $submit ;
		if($key == 'getintouch' && $submit == 'edit')
		{
			$status = $request->status ? '1' : 0;
			DB::table('settings')->where('id',$request->id) 
			->update(['description' => $request->description,'status'=>$status,'details'=>$request->details]);
		return redirect()->back()->with('message', 'Successfully Updated');
		}
		elseif($key == 'site_link' && $submit == 'add')
		{
			$status = 0;
			if($request->status){
				$status = 1;
			}
			$insert=DB::table('settings')->insert(
			  [
			      "key"=>$request->key,
				  "status"=>$status,
				  "details"=>$request->details,
				  "line1"=>$request->line1
			  ]
			);
			
			return redirect()->back()->with('message', 'Records added Successfully');
		}
		elseif($key == 'site_link' && $submit == 'edit')
		{
			$status = $request->status ? '1' : 0;
			DB::table('settings')->where('id',$request->id) 
			->update(['line1' => $request->line1,'status'=>$status,'details'=>$request->details]);
			return redirect()->back()->with('message', 'Successfully Updated');
		}
		elseif($key == 'k_p_j' && $submit == 'add')
		{
			$status = 0;
			if($request->status){
				$status = 1;
			}
			$insert=DB::table('settings')->insert(
			  [
			      "key"=>$request->key,
				  "status"=>$status,
				  "details"=>$request->details,
				  "line1"=>$request->line1
			  ]
			);
			
			return redirect()->back()->with('message', 'Records added Successfully');
		}
		elseif($key == 'k_p_j' && $submit == 'edit')
		{
			$status = $request->status ? '1' : 0;
			DB::table('settings')->where('id',$request->id) 
			->update(['line1' => $request->line1,'status'=>$status,'details'=>$request->details]);
			return redirect()->back()->with('message', 'Successfully Updated');
		}
		elseif($key == 'newsletter' && $submit == 'edit')
		{
			$status = $request->status ? '1' : 0;
			DB::table('settings')->where('id',$request->id) 
			->update(['description' => $request->description,'status'=>$status,'details'=>$request->details]);
			return redirect()->back()->with('message', 'Successfully Updated');
		}
		elseif($key == 'social_links' && $submit == 'add')
		{
			$status = 0;
			if($request->status){
				$status = 1;
			}
			$insert=DB::table('settings')->insert(
			  [
			      "key"=>$request->key,
				  "status"=>$status,
				  "details"=>$request->details,
				  "description"=>$request->description,
				  "line1"=>$request->line1,
			  ]
			);
			
			return redirect()->back()->with('message', 'Records added Successfully');
		}
		elseif($key == 'social_links' && $submit == 'edit')
		{
			$status = $request->status ? '1' : 0;
			DB::table('settings')->where('id',$request->id) 
			->update(['description' => $request->description,'status'=>$status,'details'=>$request->details,'line1'=>$request->line1]);
			return redirect()->back()->with('message', 'Successfully Updated');
		}
		elseif($key == 'copyright' && $submit == 'edit')
		{
			DB::table('settings')->where('id',$request->id) 
			->update(['details' => $request->detail]);
			return redirect()->back()->with('message', 'Successfully Updated');
		}
		elseif($key == 'privacypolicy' && $submit == 'edit')
		{
			DB::table('settings')->where('id',$request->id) 
			->update(['details' => $request->detail]);
			return redirect()->back()->with('message', 'Successfully Updated');
		}
		if($submit == 'delete'){
			DB::table('settings')->where('id', '=', $request->id)->delete();
			return redirect()->back()->with('message', 'Successfully Deleted!!');
		}
	}


	public function datesmodal(Request $request)
	{
		$patiens=DB::table('appointments')
		->join('patients','appointments.patient_id','=','patients.id')
		->where('doctor_id','=',$request->docid)
		->where('appointment_date','=',$request->date)
		->get();
        
        $Namemon = date("m",strtotime($request->date));
		$yearmodal = date("Y",strtotime($request->date));
		$day = date("d",strtotime($request->date));
		$dateObj   = DateTime::createFromFormat('!m',$Namemon);
		$Namemon = $dateObj->format('F');

		return view('admin.find_doctor.modaldates')->with(['Namemon'=>$Namemon,'yearmodal'=>$yearmodal,'day'=>$day,'patiens'=>$patiens]);


	}


	public function edtischedulemodal(Request $request)
	{
		return view('admin.find_doctor.EditConsultant')->with(['doctorid'=>$request->docid,'dateschedule'=>$request->date]);
	}

	 public function SaveSchedule(Request $request)
	{
		        //dd($request->status0);
				$idd=$request->iddoctor;
				$datesch=$request->dateschedule;
                $status3=$request->status3;
	          	$daybymonth1=$request->daybymonth1;
	          	$bymonth1=$request->bymonth1;
	          	$daybyyear1=$request->daybyyear1;
	          	$byyear1=$request->byyear1;
	            $iddoctor=$request->iddoctor;
	            $dateschedule=$request->dateschedule;

	            $datedata=json_decode($request->datedata);
	            $totalslots=json_decode($request->totalslots);
                    
                //dd($totalslots);
/*
                if($totalslots)
                {
                	foreach ($totalslots as $key => $value) {
                		
                	$appointment=($value->slotdata[$key]->start&&$value->end) ? $value->start.'-'.$value->end : '' ;

                		if($value->daybymonth&&$value->bymonth&&$value->status&&$appointment)
                		{
                			$this->bymonth($value->bymonth,$value->daybymonth,$value->status,$appointment,$value->maxp);
                		}

                		if($value->daybyyear&&$value->byyear&&$value->status&&$appointment)
                		{
                			$this->byyear($value->byyear,$value->daybyyear,$value->status,$appointment,$value->maxp);
                		}


                		if($value->status&&$appointment)
                		{
                			DB::table('schedule')
						   ->where('appointment_time','=',$appointment)
						   ->where('date','=',$datesch)
						   ->delete();

						   DB::table('schedule')->insert(
							['doctor_id' =>$idd,'status' =>$value->status,'date' =>$datesch,'appointment_time' =>$appointment,'max_patients' =>$value->maxp]
								);
                		}
                	}
                }

*/
                if($datedata&&$status3)
                {
		            foreach ($datedata as $key => $value) {

		            	if($value->start)
		            	{
		            		$start=$value->start;
		            		$end=$value->end;
		            		$end=(!$end)? $start:$end;
                            
                            if($end>=$start)
                            {
                              $this->savedate($start,$end,$idd,$status3,1,null,null);
                            }

		            	}
		            }
		        }

                
                if($bymonth1&&$daybymonth1&&$status3)
                {
		            
                  $this->bymonth($bymonth1,$daybymonth1,$idd,$status3,null,null);

		        }

		        if($byyear1&&$daybyyear1&&$status3)
                {
		            $this->byyear($byyear1,$daybyyear1,$idd,$status3,null,null);

		        }


	            //Informatiom Saved Correctly
							$id=$idd;
							$fecha =$datesch;

							$meesactual=date("m",strtotime($fecha));
							$year = date("Y",strtotime($fecha));
					        $fecha =$year.'-'.$meesactual.'-01';
					        
					        $nuevafecha = strtotime ( '+0 month' , strtotime ( $fecha ) );
							$nuevafecha = date ( 'Y-m-j' , $nuevafecha );
							$month = date("m",strtotime($nuevafecha));
							$year = date("Y",strtotime($nuevafecha));
							$meesactual = $month;
							$dateObj   = DateTime::createFromFormat('!m', $month);
							$monthName = $dateObj->format('F');


							$mes=$this->getCanlendar($nuevafecha,$id,$month,$year);
					        //dd($mes);

							if(sizeof($mes)>35)
							{
								$jf=6;
							}else
							{
								$jf=5;
							}

						return view('admin.find_doctor.calendar')->with(['meesactual'=>$meesactual,'monthName'=>$monthName,'year'=>$year,'mes'=>$mes,'jf'=>$jf,'iddoc'=>$id]);


  /*      
        if($request->status0||$request->status1||$request->status0)
          {
                if($request->status0)
                {
				    if($request->start0 && $request->end0)
				    {   
				    	$appointment0=$request->start0.'-'.$request->end0;
					    DB::table('schedule')->insert(
						    ['doctor_id' => $idd, 'status' => $request->status0,'max_patients'=>$request->maxp0,'appointment_time'=>$appointment0,'date'=>$datesch]
						  );
                    }else{
                    	return 'should write an hour in first slot';
                    }
				    
				}

				if($request->status1)
                {
                	if($request->start1&&$request->end1)
				    { 
				    	$appointment1=$request->start1.'-'.$request->end1;

	                	DB::table('schedule')->insert(
						    ['doctor_id' => $idd, 'status' => $request->status1,'max_patients'=>$request->maxp1,'appointment_time'=>$appointment1,'date'=>$datesch]
						  );
                    }else{
                    	return 'should write an hour in second slot';
                    }
				}

				if($request->status2)
				{
					if($request->start2&&$request->end2)
				    { 
				    	$appointment2=$request->start2.'-'.$request->end2;

							DB::table('schedule')->insert(
							    ['doctor_id' => $idd, 'status' => $request->status2,'max_patients'=>$request->maxp2,'appointment_time'=>$appointment2,'date'=>$datesch]
							);

                    }else{
                    	return 'should write an hour third slot';
                    }
				}

				//Informatiom Saved Correctly
				$id=$idd;
				$fecha =$datesch;

				$meesactual=date("m",strtotime($fecha));
				$year = date("Y",strtotime($fecha));
		        $fecha =$year.'-'.$meesactual.'-01';
		        
		        $nuevafecha = strtotime ( '+0 month' , strtotime ( $fecha ) );
				$nuevafecha = date ( 'Y-m-j' , $nuevafecha );
				$month = date("m",strtotime($nuevafecha));
				$year = date("Y",strtotime($nuevafecha));
				$meesactual = $month;
				$dateObj   = DateTime::createFromFormat('!m', $month);
				$monthName = $dateObj->format('F');


				$mes=$this->getCanlendar($nuevafecha,$id,$month,$year);
		        //dd($mes);

				if(sizeof($mes)>35)
				{
					$jf=6;
				}else
				{
					$jf=5;
				}

			return view('admin.find_doctor.calendar')->with(['meesactual'=>$meesactual,'monthName'=>$monthName,'year'=>$year,'mes'=>$mes,'jf'=>$jf,'iddoc'=>$id]);
		}else
		{
			return 'Should select one status';
		}


	            if($request->startmon1&&$request->status3)
	            {
			         if($request->endmon1)
			         {
	                   $dateend=$request->endmon1;
			         }else{
	                   $dateend=$request->startmon1;
			         }

			        $this->period($idd,$request->status3,$request->startmon1,$dateend);
	            
	            }

	            if($request->startmon2&&$request->status3)
	            {
			        if($request->endmon2)
			         {
	                   $dateend=$request->endmon2;
			         }else{
	                   $dateend=$request->startmon2;
			         }

			        $this->period($idd,$request->status3,$request->startmon2,$dateend);
	            
	            }

	            if($request->startmon3&&$request->status3)
	            {
			        if($request->endmon2)
			         {
	                   $dateend=$request->endmon3;
			         }else{
	                   $dateend=$request->startmon3;
			         }

			        $this->period($idd,$request->status3,$request->startmon3,$dateend);
	            
	            }
	     */

	}

	public function savedate ($start,$end,$idd,$status3,$q,$appointment,$mx)
	{
      $i=0;

		while ($i<80) {

		   DB::table('schedule')
		   ->where('appointment_time','=',$appointment)
		   ->where('date','=',$start)
		   ->delete();

		   DB::table('schedule')->insert(
			['doctor_id' =>$idd,'status' =>$status3,'date' =>$start,'appointment_time' =>$appointment,'max_patients' =>$mx]
				);

		   $i++;
		   
		   if($start==$end){$i=82;}

		   $start = strtotime ( '+ '.$q.' days' , strtotime ( $start ) ) ;
		   $start = date ( 'Y-m-d' , $start );

		}
	} 

	public function bymonth($bymonth1,$daybymonth1,$idd,$status3,$appointment,$mx)
	{

	    foreach ($bymonth1 as $key => $value) {

            	foreach ($daybymonth1 as $k => $val) {
            	 $dateconver=$bymonth1[$key].' 01 '.date('Y');
            	 $dateconver=date('Y-m-d', strtotime($dateconver));
            	 $test = new DateTime($dateconver);
                 $start=$test->modify('first '.$daybymonth1[$k])->format('Y-m-d');
                 //$end= $test->modify('last '.$daybymonth1[$k])->format('Y-m-d');
                 $end=date('Y-m-d', strtotime('last '.$daybymonth1[$k].' of '.$bymonth1[$key].' '.date('Y')));
                   
                   
            		$this->savedate($start,$end,$idd,$status3,7,$appointment,$mx);
            	}
            }

	}

	public function byyear($byyear1,$daybyyear1,$idd,$status3,$appointment,$mx)
	{

		foreach ($byyear1 as $key => $value) {

		            	foreach ($daybyyear1 as $k => $val) {
		            	 $dateconver='january 01 '.$byyear1[$key];
		            	 $dateconver=date('Y-m-d', strtotime($dateconver));
		            	 $test = new DateTime($dateconver);
	                     $start=$test->modify('first '.$daybyyear1[$k])->format('Y-m-d');
	                     //$end= $test->modify('last '.$daybymonth1[$k])->format('Y-m-d');
	                     $end=date('Y-m-d', strtotime('last '.$daybyyear1[$k].' of december '.$byyear1[$key]));
	                       
	                       
		            		$this->savedate($start,$end,$idd,$status3,7,null,null);
		            	}
		            }
        
	}


	public function period ($idd,$status,$datein,$dateend){
       
        $i=0;
        while (1) {
		            
		            
		         	$sum='+'.$i.' day';
		         	$newdate = strtotime ($sum, strtotime ( $datein ) ) ;

		         	DB::table('schedule')->insert(
					          ['doctor_id' => $idd, 'status' =>$status,'date'=>$newdate]
					        );

			         	if($dateend==$newdate)
			         	{
			         		break;
			             
			            }

			         $i++;
		         }

	}

	public function getCanlendar($nuevafecha,$id,$month,$ano)
	{
          //Convert the date string into a unix timestamp
		$unixTimestamp = strtotime($nuevafecha);

		//Get the day of the week using PHP's date function.
		$dayOfWeek = date("w", $unixTimestamp);

		$a_date = $nuevafecha;
		$last= date("t", strtotime($a_date));

		$i=2;
		$k=$dayOfWeek+1;
		$mes=array();
        $date=$ano.'-'.$month.'-'.'01';
		
		$patiens=DB::table('appointments')
		->join('patients','appointments.patient_id','=','patients.id')
		->where('doctor_id','=',$id)
		->where('appointment_date','=',$date);

		$statusdoc=DB::table('schedule')
		->select('status')
		->where('doctor_id','=',$id)
		->where('date','=',$date)
		->first();

		if($statusdoc)
		{
			$stat=$statusdoc->status;
		}else
		{
			$stat='';
		}
		

		$book=$patiens->count('patient_id');

		$mes[$dayOfWeek]=[
			'dia'=> 1,
			'book'=>$book,
			'statusdoc'=>$stat
		];


		for ($h=1; $h<$dayOfWeek+1 ; $h++) { 
		  $mes[$dayOfWeek-$h]=[
			'dia'=> '',
			'book'=>'',
			'statusdoc'=>''
		    ];
		}

		while (1) {
            
            $n = sprintf("%02d", $i);
            $date=$ano.'-'.$month.'-'.$n;
			$patiens=DB::table('appointments')
		    ->join('patients','appointments.patient_id','=','patients.id')
		    ->where('doctor_id','=',$id)
		    ->where('appointment_date','=',$date);

		    $statusdoc=DB::table('schedule')
				->select('status')
				->where('doctor_id','=',$id)
				->where('date','=',$date)
				->first();

			if($statusdoc)
				{
					$stat=$statusdoc->status;
				}else
				{
					$stat='';
				}
						

			$book=$patiens->count('patient_id');

		 
			$mes[$k]=[
			'dia'=> $i,
			'book'=>$book,
			'statusdoc'=>$stat
		    ];

		    if($i==$last)
		    {
		    	break;
		    }

		    $k++;$i++;
		}

        return $mes;
	}


	public function postFindDoctorEdit(Request $request, $id)
	{
		// return $request->all();
		$this->validate($request,[
	        'profile_status' => 'sometimes',
			'profile_consultant_name' => 'required',
			'profile_service' => 'required|exists:services,id',
			'profile_degrees' => 'required',
			'profile_experience' => 'required',
			'profile_consultant_image' => 'sometimes|image|mimes:jpeg,png|min:1|max:500',
			'profile_details' => 'required',
			'profile_clinic_hours' => 'required',
			'profile_consultant_type' => 'required',
			'profile_consultant_image_alt_text' => 'sometimes',
			'profile_enable_link' => 'required'
		],[
	    'profile_status.sometimes' => 'The Status field is required.',
	    'profile_consultant_name.required' => 'The Consultant Name field is required.',
	    'profile_service.required' => 'The Specialty field is required.',
	    'profile_service.exists' => 'The Specialty already exists.',
	    'profile_degrees.required' => 'The Degrees field is required.',
	    'profile_experience.required' => 'The Experince field is required.',
	    'profile_consultant_image.required' => 'The Consultant Image field is required.',
	    'profile_consultant_image.image' => 'The Consultant Image must be an image.',
	    'profile_details.required' => 'The Details is required.',
	    'profile_clinic_hours.required' => 'The Clinic Hours is required.',
	    'profile_consultant_type.required' => 'The Consultant Type is required.',
	    'profile_consultant_image_alt_text.required' => 'The Consultant Image Alt Text is required.',
	    'profile_enable_link.required' => 'The Enable Link is required.',
	    ]
		);

		$doctor = doctor::find($id);
		
		// if user choose a file, replace the old one //
		if( $request->hasFile('profile_consultant_image') ){
			$file = $request->file('profile_consultant_image');
			$destination_path = 'images/find_doctor/';
			$filename = str_random(6).'_'.$file->getClientOriginalName();
			$file->move(public_path() .'/'. $destination_path, $filename);
			$doctor->image = $destination_path . $filename;
		}
			// return public_path() .'/'. $destination_path.$filename;

		// replace old data with new data from the submitted form //
		$doctor->status = ($request->has('profile_status') && $request->profile_status == 'on'?1:0);
		$doctor->name = $request->profile_consultant_name;
		$doctor->service_id = $request->profile_service;
		$doctor->degrees = $request->profile_degrees;
		$doctor->experience = $request->profile_experience;
		$doctor->details = $request->profile_details;
		$doctor->clinic_hours = $request->profile_clinic_hours;
		$doctor->type = $request->profile_consultant_type;
		if($request->has('profile_consultant_image_alt_text')){
			$doctor->image_alt_text = $request->profile_consultant_image_alt_text;
		}
		$doctor->enable_link = $request->profile_enable_link;
		$doctor->save();

		return redirect('/admin/find_doctor_list')->with('message', 'The information has been saved/updated successfully.');
	}

	public function getPatientsList()
	{
		$countries = Country::where('status', 1)->get();
		$patients = Patient::all();
		return view('admin.find_doctor.patients_list', compact('countries','patients'));
	}

	public function postAddNewPatientAddNew(Request $request)
	{
		$this->validate($request,[
			'patient_status' => 'required',
			'patient_mrn_number' => 'required',
			'patient_last_name' => 'required',
			'patient_first_name' => 'required',
			'patient_date_of_birth' => 'required',
			'patient_gender' => 'required',
			'patient_passport_number' => 'required',
			'patient_contact_number' => 'required',
			'patient_address' => 'required',
			'patient_city' => 'required',
			'patient_postal_code' => 'required',
			'patient_state' => 'required',
			'patient_country_id' => 'required|exists:countries,id',
			'patient_email' => 'required|unique:users,email',
			'password' => 'required|confirmed',
			'patient_newsletter_subscription' => 'sometimes'
		]);

		$user = new User;
		$user->name = $request->patient_first_name .' '. $request->patient_last_name;
		$user->email = $request->patient_email;
		$user->password = bcrypt($request->password);
		$user->save();

		$patient = new Patient;
		$patient->user_id = $user->id;
		$patient->status = $request->patient_status;
		$patient->mrn_number = $request->patient_mrn_number;
		$patient->last_name = $request->patient_last_name;
		$patient->first_name = $request->patient_first_name;
		$patient->date_of_birth = $request->patient_date_of_birth;
		$patient->gender = $request->patient_gender;
		$patient->passport_number = $request->patient_passport_number;
		$patient->contact_number = $request->patient_contact_number;
		$patient->address = $request->patient_address;
		$patient->city = $request->patient_city;
		$patient->postal_code = $request->patient_postal_code;
		$patient->state = $request->patient_state;
		$patient->country_id = $request->patient_country_id;
		$patient->newsletter_subscription = $request->patient_newsletter_subscription;
		$patient->save();

		return [
			'status' => 'ok',
			'message' => 'The information has been saved/updated successfully.'
		];
	}

	public function postPatientSaveEdit(Request $request)
	{
        $patient = Patient::find($request->patient_id);

        $this->validate($request,[
			'patient_status' => 'required',
			'patient_mrn_number' => 'required|unique:patients,mrn_number,'.$patient->id,
			'patient_last_name' => 'required',
			'patient_first_name' => 'required',
			'patient_date_of_birth' => 'required',
			'patient_gender' => 'required',
			'patient_passport_number' => 'required',
			'patient_contact_number' => 'required',
			'patient_address' => 'required',
			'patient_city' => 'required',
			'patient_postal_code' => 'required',
			'patient_state' => 'required',
			'patient_country_id' => 'required|exists:countries,id',
			'patient_newsletter_subscription' => 'required',
			// 'patient_email' => 'required|email|unique:users,email',
			// 'password' => 'required|confirmed',
			'patient_id' => 'required|exists:patients,id'
		]);

		$patient->status = $request->patient_status;
		$patient->mrn_number = $request->patient_mrn_number;
		$patient->last_name = $request->patient_last_name;
		$patient->first_name = $request->patient_first_name;
		$patient->date_of_birth = $request->patient_date_of_birth;
		$patient->gender = $request->patient_gender;
		$patient->passport_number = $request->patient_passport_number;
		$patient->contact_number = $request->patient_contact_number;
		$patient->address = $request->patient_address;
		$patient->city = $request->patient_city;
		$patient->postal_code = $request->patient_postal_code;
		$patient->state = $request->patient_state;
		$patient->country_id = $request->patient_country_id;
		$patient->newsletter_subscription = $request->patient_newsletter_subscription;
		$patient->save();

		$user = User::find($patient->user_id);
		$user->name = $request->patient_first_name .' '. $request->patient_last_name;
		// $user->email = $request->patient_email;
		if($request->password != ''){
			$user->password = bcrypt($request->password);
		}
		$user->save();

		return [
			'status' => 'ok',
			'message' => 'The information has been saved/updated successfully.'
		];
	}

	public function getAppointmentsList()
	{
		$appointments = \App\Appointment::with(['patient', 'doctor'])->has('patient')->has('doctor')->get();
		
		return view('admin.find_doctor.appointments_list', compact('appointments'));
	}

	public function getPatientDelete($id)
	{
		$patient = Patient::find($id);
		$patient->delete();

		return [
			'status' => 'ok',
			'message' => 'The information has been saved/updated successfully.'
		];
	}

	public function getDeleteDoctorImage($id)
	{
		$doctor = doctor::find($id);
		$doctor->image = null;
		$doctor->save();
		
		return [
			'status' => 'ok',
			'message' => 'The information has been saved/updated successfully.'
		];
	}
}
